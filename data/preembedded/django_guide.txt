Django Web Framework Documentation

Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design.

Key Features:
- The admin interface: Automatic admin interface for models
- Object-relational mapper (ORM): Database abstraction layer
- URL routing: Clean, elegant URL design
- Template engine: Powerful templating system
- Forms: HTML form handling and validation
- Authentication: User authentication system
- Internationalization: Built-in internationalization support
- Security: Protection against common security threats

Installation:
pip install Django

Creating a Project:
django-admin startproject mysite
cd mysite
python manage.py runserver

Project Structure:
mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py

Creating an App:
python manage.py startapp myapp

Models:
from django.db import models

class Article(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

Views:
from django.shortcuts import render
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world!")

def article_list(request):
    articles = Article.objects.all()
    return render(request, 'articles/list.html', {'articles': articles})

URLs:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('articles/', views.article_list, name='article_list'),
]

Templates:
<!-- templates/articles/list.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Articles</title>
</head>
<body>
    <h1>Articles</h1>
    {% for article in articles %}
        <h2>{{ article.title }}</h2>
        <p>{{ article.content }}</p>
    {% endfor %}
</body>
</html>

Forms:
from django import forms

class ContactForm(forms.Form):
    name = forms.CharField(max_length=100)
    email = forms.EmailField()
    message = forms.CharField(widget=forms.Textarea)

Admin Interface:
from django.contrib import admin
from .models import Article

@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    list_display = ['title', 'created_at']
    search_fields = ['title', 'content']

Database Migrations:
python manage.py makemigrations
python manage.py migrate

Authentication:
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login

@login_required
def protected_view(request):
    return render(request, 'protected.html')

Static Files:
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]

# In templates
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'style.css' %}">

Middleware:
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

Testing:
from django.test import TestCase
from .models import Article

class ArticleTestCase(TestCase):
    def setUp(self):
        Article.objects.create(title="Test", content="Test content")

    def test_article_creation(self):
        article = Article.objects.get(title="Test")
        self.assertEqual(article.content, "Test content")

Deployment:
- Configure ALLOWED_HOSTS
- Set DEBUG = False
- Configure static files serving
- Set up database (PostgreSQL recommended)
- Use environment variables for secrets
- Consider using Docker for containerization

Best Practices:
- Use virtual environments
- Follow the DRY principle
- Use Django's built-in security features
- Write tests for your code
- Use meaningful names for models and views
- Keep views thin, models fat
- Use Django's ORM instead of raw SQL when possible